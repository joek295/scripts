#!/bin/bash
# a script for outputting a small portion of the Tao Te Ching.
# this script starts from a random full stop, then prints the following
# sentence(s) until reaching a full stop.

tao=$HOME/documents/ebooks/Tao_Te_Ching.txt
# you can chose between /dev/random which is slow but provides ``more random''
# numbers than the faster /dev/urandom
dev_rand=/dev/urandom
#dev_rand=/dev/random
startline_num=0
lines=($(cat /home/joe/documents/ebooks/Tao_Te_Ching.txt | grep -n -s "\." | sed 's/:.*//'))

# shuffle function based on Knufth-Fisher-Yayes shuffle algorithm
# http://mywiki.wooledge.org/BashFAQ/026 thank you!
# takes an array as input through 'shuffle ARRAY[@]', outputs arr[@]
shuffle() {
   local i tmp size max rand
   arr=("${!1}") # retrieve array from $1
   # $RANDOM % (i+1) is biased because of the limited range of $RANDOM
   # Compensate by using a range which is a multiple of the array size.
   size=${#arr[*]}
   max=$(( 32768 / size * size ))

   for ((i=size-1; i>0; i--)); do
      while (( (rand=$RANDOM) >= max )); do :; done
      rand=$(( rand % (i+1) ))
      tmp=${arr[i]} arr[i]=${arr[rand]} arr[rand]=$tmp
   done
}

# if we have no arguments we pick a random verse
if [ $# -eq 0 ]; then
   shuffle lines[@] && startline_num=${arr[1]}
else
   # we got the wrong number of arguments
   echo "Stop giving arguments. They will make you stray from the path." >&2
   exit 1
fi

startline_num=$(($startline_num+1))
startline="$(sed -n "$startline_num"'p' $tao)"

while [[ ${startline:0:1} == "" ]] || [[ ${startline:0:1} == "-" ]]; do
   startline_num=$(($startline_num+1))
   startline=$(sed -n "$startline_num"'p' $tao)
done

stopline_num=$startline_num
stopline="$startline"
stopline_length=$((${#stopline}-1))

while [[ ${stopline:$stopline_length:1} != "." ]]; do
   stopline_num=$(($stopline_num+1))
   stopline="$(sed -n "$stopline_num"'p' $tao)"
   stopline_length=$((${#stopline}-1))
done

sed -n "$startline_num,$stopline_num"'p' $tao
