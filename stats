#! /usr/bin/env python

# To Do:
# Sort out Mode
# check binomial stuff
# To be coded:
# Chi-Squared, Poisson Distribution, Normal Distribution, PMCC, Spearman's Rank

import math
import sys

data = []

raw_data = open(sys.argv[1])
for i in raw_data:
  i = float(i)
  data.append(i)

def neaten(data):
  data = data.sort

def mean (data):
  global xbar
  global number
  number = len(data)
  sigma_x = sum(data)
  xbar = sigma_x / number
  
def median (data):
  global median
  n = number / 2 - 1
  n2 = number / 2 
  if number % 2 == 0:
    middle1 = data[n]
    middle2 = data[n2]
    median = (middle1+middle2)/2.0
  else:
    middle = data[n2]
    median = middle

def mode (data):
  a = 0
  for i in data:
    b = count(i)
    if b > a:
      b = a
      mode = [i, b]
  print mode
  
def datarange (data):
  global Range
  global midrange
  highest = number-1
  Range = data[highest] - data[0]
  midrange = (data[highest] + data[0]) /2
  
def sxx (data):
  global sxx
  listsqr = [n**2 for n in data]
  sxx = sum(listsqr) - number * xbar**2
  
def standarddev (data):
  global sigma
  sxx(data)
  n = math.sqrt(sxx)
  sigma = n/(float(number)-1)
  
def variance (data):
  global var
  var = sxx/(number-1)
  
def msd (data):
  global msd
  msd = sxx/number
  
def rmsd (data):
  global rmsd
  rmsd = math.sqrt(msd)

def bin_equal(n, p, r):
  nCr = (math.factorial(n)/(math.factorial(r)*math.factorial(n-r)))
  X = nCr*(p**r)*((1-p)**(n-r))
  return X

def bin_less (n,p,r):
  while n + 1 > 0:
      nCr = (math.factorial(n)/(math.factorial(r)*math.factorial(n-r)))
      X = nCr*(p**r)*((1-p)**(n-r))
      P = p+X
  return P

def bin_more (n, p, r):
  P_more = 1 - bin_less(n,p,r)
  return P_more

neaten(data)
mean(data), standarddev(data), variance(data), msd(data), rmsd(data), median(data)
print "Mean =", xbar
print "Median =", median
print "SXX =", sxx
print "Standard Deviation =", sigma, "; Variance =", var
print "Mean Square Distribution =", msd, "; Root Mean Square Distribution =", rmsd
